version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgis/postgis:13-3.1
    container_name: healthcare-postgres
    environment:
      POSTGRES_DB: healthcare_insights
      POSTGRES_USER: healthcare_user
      POSTGRES_PASSWORD: healthcare_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_user -d healthcare_insights"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Airflow
  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: healthcare-airflow-webserver
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://healthcare_user:healthcare_password@postgres:5432/healthcare_insights
      AIRFLOW__CORE__FERNET_KEY: your-fernet-key-here
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./etl:/opt/airflow/dags/etl
      - ./ml:/opt/airflow/dags/ml
      - ./data:/opt/airflow/dags/data
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: healthcare-airflow-scheduler
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://healthcare_user:healthcare_password@postgres:5432/healthcare_insights
      AIRFLOW__CORE__FERNET_KEY: your-fernet-key-here
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./etl:/opt/airflow/dags/etl
      - ./ml:/opt/airflow/dags/ml
      - ./data:/opt/airflow/dags/data
      - airflow_logs:/opt/airflow/logs
    command: scheduler
    networks:
      - healthcare-network

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: healthcare-dashboard
    ports:
      - "8501:8501"
    environment:
      - DATABASE_URL=postgresql://healthcare_user:healthcare_password@postgres:5432/healthcare_insights
    volumes:
      - ./data:/app/data
      - ./ml/saved_models:/app/ml/saved_models
    depends_on:
      - postgres
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: healthcare-redis
    ports:
      - "6379:6379"
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: healthcare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - dashboard
      - airflow-webserver
    networks:
      - healthcare-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: healthcare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - healthcare-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: healthcare-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - healthcare-network

volumes:
  postgres_data:
  airflow_logs:
  prometheus_data:
  grafana_data:

networks:
  healthcare-network:
    driver: bridge
